// tslint:disable
/**
 * Mapt
 * Shape file uploader/sharing application
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface BodyUploadShapeDatasetsShapesPost
 */
export interface BodyUploadShapeDatasetsShapesPost {
  /**
   *
   * @type {any}
   * @memberof BodyUploadShapeDatasetsShapesPost
   */
  shape_file: any;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface Layer
 */
export interface Layer {
  /**
   *
   * @type {number}
   * @memberof Layer
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Layer
   */
  label: string;
  /**
   *
   * @type {string}
   * @memberof Layer
   */
  group: string;
}
/**
 *
 * @export
 * @interface ShapeUploaded
 */
export interface ShapeUploaded {
  /**
   *
   * @type {string}
   * @memberof ShapeUploaded
   */
  dataset_href: string;
  /**
   *
   * @type {number}
   * @memberof ShapeUploaded
   */
  file_size: number;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<string>}
   * @memberof ValidationError
   */
  loc: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get Layers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLayersLayersGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/layers/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Upload a new shape file
     * @summary Upload Shape
     * @param {any} shapeFile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadShapeDatasetsShapesPost: async (
      shapeFile: any,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'shapeFile' is not null or undefined
      if (shapeFile === null || shapeFile === undefined) {
        throw new RequiredError(
          "shapeFile",
          "Required parameter shapeFile was null or undefined when calling uploadShapeDatasetsShapesPost."
        );
      }
      const localVarPath = `/datasets/shapes/`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      if (shapeFile !== undefined) {
        localVarFormParams.append("shape_file", shapeFile as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get Layers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLayersLayersGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Layer>>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).getLayersLayersGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Upload a new shape file
     * @summary Upload Shape
     * @param {any} shapeFile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadShapeDatasetsShapesPost(
      shapeFile: any,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShapeUploaded>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration
      ).uploadShapeDatasetsShapesPost(shapeFile, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Get Layers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLayersLayersGet(options?: any): AxiosPromise<Array<Layer>> {
      return DefaultApiFp(configuration)
        .getLayersLayersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Upload a new shape file
     * @summary Upload Shape
     * @param {any} shapeFile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadShapeDatasetsShapesPost(
      shapeFile: any,
      options?: any
    ): AxiosPromise<ShapeUploaded> {
      return DefaultApiFp(configuration)
        .uploadShapeDatasetsShapesPost(shapeFile, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Get Layers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getLayersLayersGet(options?: any) {
    return DefaultApiFp(this.configuration)
      .getLayersLayersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Upload a new shape file
   * @summary Upload Shape
   * @param {any} shapeFile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadShapeDatasetsShapesPost(shapeFile: any, options?: any) {
    return DefaultApiFp(this.configuration)
      .uploadShapeDatasetsShapesPost(shapeFile, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
